## Simplified test for screenshot workflow functionality
## Tests the screenshot resource handling and directory management

import unittest, json, os, strutils, times, tables, base64, strformat
import ../src/nimgenie
import ../src/database

proc createMockPngFile(filePath: string) =
  ## Create a small valid PNG file for testing
  let pngData = "\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x01\x00\x00\x00\x01\x08\x02\x00\x00\x00\x90wS\xde\x00\x00\x00\tpHYs\x00\x00\x0b\x13\x00\x00\x0b\x13\x01\x00\x9a\x9c\x18\x00\x00\x00\nIDATx\x9cc\x00\x01\x00\x00\x05\x00\x01\r\n-\xdb\x00\x00\x00\x00IEND\xaeB`\x82"
  writeFile(filePath, pngData)

proc createMockScreenshot(screenshotDir: string, filename: string): string =
  ## Simulate taking a screenshot by creating a mock PNG file
  let fullPath = screenshotDir / filename
  createMockPngFile(fullPath)
  return fullPath

suite "Screenshot Workflow Tests":
  
  var testTempDir: string
  var screenshotDir: string
  
  setup:
    # Create test environment
    testTempDir = getTempDir() / "nimgenie_screenshot_test_" & $getTime().toUnix()
    screenshotDir = testTempDir / "screenshots"
    createDir(testTempDir)
    createDir(screenshotDir)
    
  teardown:
    # Cleanup
    if dirExists(testTempDir):
      removeDir(testTempDir)

  test "Screenshot file creation and detection":
    # Create screenshots
    let screenshot1 = createMockScreenshot(screenshotDir, "game_state_001.png")
    let screenshot2 = createMockScreenshot(screenshotDir, "error_screen.png")
    
    echo fmt"Screenshots created: {screenshot1}, {screenshot2}"
    
    # Verify files exist
    check fileExists(screenshot1)
    check fileExists(screenshot2)
    
    # Test MIME type detection
    check detectMimeType(screenshot1) == "image/png"
    check detectMimeType(screenshot2) == "image/png"
    
    # Test image file detection
    check isImageFile(screenshot1) == true
    check isImageFile(screenshot2) == true

  test "Screenshot directory structure":
    # Create nested screenshot structure
    let subDir = screenshotDir / "level1"
    createDir(subDir)
    
    let mainScreenshot = createMockScreenshot(screenshotDir, "main_menu.png")
    let levelScreenshot = createMockScreenshot(subDir, "boss_fight.png")
    
    echo fmt"Created nested screenshots: {mainScreenshot}, {levelScreenshot}"
    
    check fileExists(mainScreenshot)
    check fileExists(levelScreenshot)
    
    # Test that paths are properly nested
    check mainScreenshot.startsWith(screenshotDir)
    check levelScreenshot.startsWith(subDir)
    check subDir.startsWith(screenshotDir)

  test "Mixed file types in screenshots directory":
    # Create different file types that might exist in a screenshots directory
    let pngFile = createMockScreenshot(screenshotDir, "screenshot.png")
    
    let txtFile = screenshotDir / "screenshot_log.txt"
    writeFile(txtFile, "Screenshot taken at 2023-12-01 15:30:45\nResolution: 1920x1080")
    
    let jsonFile = screenshotDir / "screenshot_metadata.json"
    writeFile(jsonFile, """{"file": "screenshot.png", "timestamp": "2023-12-01T15:30:45Z"}""")
    
    echo fmt"Created mixed files: {pngFile}, {txtFile}, {jsonFile}"
    
    # Test MIME type detection for each
    check detectMimeType(pngFile) == "image/png"
    check detectMimeType(txtFile) == "text/plain"
    check detectMimeType(jsonFile) == "application/json"
    
    # Test image detection
    check isImageFile(pngFile) == true
    check isImageFile(txtFile) == false
    check isImageFile(jsonFile) == false

  test "Base64 encoding for binary files":
    let screenshot = createMockScreenshot(screenshotDir, "test_encode.png")
    
    # Test base64 encoding
    let encoded = encodeFileAsBase64(screenshot)
    check encoded.len > 0
    
    # Encoded content should not contain raw PNG signature
    check not ("\x89PNG" in encoded)
    
    # Should be valid base64 (basic check - no binary characters)
    var validBase64 = true
    for c in encoded:
      if not (c.isAlphaNumeric() or c in ['/', '+', '=']):
        validBase64 = false
        break
    check validBase64

suite "Directory Registration Tests":
  
  var testTempDir: string
  var screenshotDir: string
  var testDb: Database
  
  setup:
    testTempDir = getTempDir() / "nimgenie_dir_test_" & $getTime().toUnix() 
    screenshotDir = testTempDir / "screenshots"
    createDir(testTempDir)
    createDir(screenshotDir)
    
    let testDbPath = testTempDir / "test.db"
    testDb = initDatabase(testDbPath)
    
  teardown:
    testDb.close()
    if dirExists(testTempDir):
      removeDir(testTempDir)

  test "Directory registration and retrieval":
    # Register screenshots directory
    let success = testDb.addRegisteredDirectory(screenshotDir, "Game Screenshots", "Test screenshots")
    check success == true
    
    # Retrieve registered directories
    let dirs = testDb.getRegisteredDirectories()
    check dirs.kind == JArray
    check dirs.len == 1
    
    let entry = dirs[0]
    check entry["path"].getStr() == screenshotDir
    check entry["name"].getStr() == "Game Screenshots"
    check entry["description"].getStr() == "Test screenshots"

  test "Multiple directory registration":
    let docsDir = testTempDir / "documents"
    createDir(docsDir)
    
    # Register multiple directories
    check testDb.addRegisteredDirectory(screenshotDir, "Screenshots", "Game screenshots")
    check testDb.addRegisteredDirectory(docsDir, "Documents", "Game documentation")
    
    # Verify both are registered
    let dirs = testDb.getRegisteredDirectories()
    check dirs.len == 2
    
    var foundScreenshots = false
    var foundDocs = false
    
    for entry in dirs:
      let name = entry["name"].getStr()
      if name == "Screenshots":
        foundScreenshots = true
        check entry["path"].getStr() == screenshotDir
      elif name == "Documents":
        foundDocs = true
        check entry["path"].getStr() == docsDir
    
    check foundScreenshots
    check foundDocs

when isMainModule:
  # Allow running this test directly
  echo "Running simplified screenshot workflow tests..."